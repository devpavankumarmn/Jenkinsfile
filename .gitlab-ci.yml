stages:
    - npm
    - sonar
    - trivy file scan
    - docker
    - trivy image scan
    - run container

Install dependency:
    stage: npm
    image:
        name: node:16
    script:
        - npm install

sonarqube-check:
  stage: sonar
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - main

Trivy file scan:
  stage: trivy file scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs .

Docker build and push:
  stage: docker
  image:
    name: docker:latest
  services:
    - docker:dind
  script:
    - docker build --build-arg X_RAPIDAPI_KEY=a07dc9cac6msh9ed95f02ef95260p1c1576jsne8cac24f1161 -t youtubeclone .
    - docker tag youtubeclone pavankumarf5/youtubeclone:latest
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push pavankumarf5/youtubeclone:latest

Scan image:
  stage: trivy image scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy image pavankumarf5/youtubeclone:latest

deploy:
  stage: run container
  tags:
    - youtube
  script:
    - docker run -d --name youtube -p 3000:3000 pavankumarf5/youtubeclone:latest


image: docker:19.03.12
services:
  - docker:19.03.12-dind

stages:
  - Build
  
variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:latest

build_job:
  stage: Build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
    - docker logout





default:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info


stages:
  - create-image

Build-image-job:
  stage: create-image
  image: docker
  services: 
    - docker:dind
  script:
    - echo $CI_GITLAB_TOKEN | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - sudo docker build -t $CI_REGISTRY_IMAGE .
    - sudo docker push $CI_REGISTRY_IMAGE










stages:
  - setup
  - build

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

before_script:
  - apk update -qy
  - apk install -y docker.io

services:
  - docker:dind

install_dependencies:
  stage: setup
  script:
    - docker --version

build_image:
  stage: build
  script:
    - echo $CI_GITLAB_TOKEN | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - sudo docker build -t $CI_REGISTRY_IMAGE .
    - sudo docker push $CI_REGISTRY_IMAGE
